{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","containers/App.js","index.js","robots.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","alt","src","CardList","robots","cardArray","map","user","i","key","Searchbox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","toLowerCase","includes","length","Component","ReactDOM","render","username","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCFSC,EAZF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAKC,EAAc,EAAdA,MAAMC,EAAQ,EAARA,GACzB,OACM,yBAAKC,UAAU,oDACf,yBAAKC,IAAI,SAAQC,IAAG,+BAA0BH,EAA1B,cACpB,6BACA,4BAAKF,GACL,2BAAIC,MCaIK,EApBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACZC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GACnC,OACC,kBAAC,EAAD,CACAC,IAAKD,EACLT,GAAIK,EAAOI,GAAGT,GACdF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,WAKnB,OACC,6BACEO,EADF,MCHaK,EAZG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAChC,OACA,yBAAKZ,UAAU,OACf,2BACAA,UAAU,mCACVa,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCII,EARA,SAACC,GACf,OACG,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAO,kBAAkBC,OAAO,UACjEJ,EAAMK,WC8CIC,G,wDAxCd,aAAc,IAAD,8BACZ,gBAYDC,eAAiB,SAACC,GAEjB,EAAKC,SAAS,CAACf,YAAac,EAAME,OAAOC,SAbzC,EAAKC,MAAQ,CACTzB,OAAQ,GACLO,YAAa,IAJR,E,gEAQO,IAAD,OAChBmB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAACtB,OAAQ8B,S,+BAMhC,IAAD,OACDC,EAAeC,KAAKP,MAAMzB,OAAOiC,QAAO,SAAAjC,GAC3C,OAAOA,EAAOP,KAAKyC,cAAcC,SAAS,EAAKV,MAAMlB,YAAY2B,kBAE/D,OAAgC,IAA7BF,KAAKP,MAAMzB,OAAOoC,OAEb,uCAIb,yBAAKxC,UAAU,MACf,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWY,aAAcwB,KAAKZ,iBAC9B,kBAAC,EAAD,KAEA,kBAAC,EAAD,CAAUpB,OAAQ+B,U,GAjCFM,cCElBC,IAASC,OACR,kBAAC,EAAD,CAAKvC,OCZgB,CACpB,CACEL,GAAI,EACJF,KAAM,gBACN+C,SAAU,OACV9C,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,eACN+C,SAAU,YACV9C,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,mBACN+C,SAAU,WACV9C,MAAO,sBAET,CACEC,GAAI,EACJF,KAAM,mBACN+C,SAAU,WACV9C,MAAO,6BAET,CACEC,GAAI,EACJF,KAAM,mBACN+C,SAAU,SACV9C,MAAO,4BAET,CACEC,GAAI,EACJF,KAAM,uBACN+C,SAAU,mBACV9C,MAAO,2BAET,CACEC,GAAI,EACJF,KAAM,kBACN+C,SAAU,eACV9C,MAAO,0BAET,CACEC,GAAI,EACJF,KAAM,2BACN+C,SAAU,gBACV9C,MAAO,wBAET,CACEC,GAAI,EACJF,KAAM,kBACN+C,SAAU,WACV9C,MAAO,2BAET,CACEC,GAAI,GACJF,KAAM,qBACN+C,SAAU,iBACV9C,MAAO,6BD9CR+C,SAASC,eAAe,SNsHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d015edf6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\n\r\n\r\nconst Card = ({name,email,id}) => {\r\n\treturn(\r\n       <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n       <img alt='robots'src={`https://robohash.org/${id}&200x200`} />\r\n       <div>\r\n       <h2>{name}</h2>\r\n       <p>{email}</p>\r\n       </div>\r\n       </div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\tconst cardArray = robots.map((user, i) => {\r\n\t\treturn (\r\n\t\t\t<Card \r\n\t\t\tkey={i}\r\n\t\t\tid={robots[i].id} \r\n\t\t\tname={robots[i].name} \r\n\t\t\temail={robots[i].email}\r\n\t\t\t/>\r\n\t\t);\r\n\t})\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{cardArray};\r\n\t\t</div>\r\n\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nconst Searchbox = ({searchfield, searchChange}) => {\r\n\treturn (\r\n\t<div className='pa2'>\r\n\t<input \r\n\tclassName='pa3 ba b--green bg-lightest-blue' \r\n\ttype='search' \r\n\tplaceholder='search robots' \r\n\tonChange={searchChange}\r\n\t/>\r\n\t</div>\r\n\t);\r\n}\r\nexport default Searchbox;","import React from 'react';\r\nconst Scroll = (props) => {\r\n\treturn (\r\n    <div style={{overflowY: 'scroll', border:'5px solid black',height:'500px' }}>\r\n    {props.children}\r\n    </div>\r\n\t\t);\r\n};\r\n\r\nexport default Scroll;","import React,{Component } from 'react'\r\nimport CardList from '../components/CardList';\r\nimport Searchbox from '../components/Searchbox';\r\n//import { robots } from './robots';\r\nimport Scroll from '../components/Scroll';\r\n//import ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t    robots: [],\r\n\t        searchfield: ''\t\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(users => this.setState({robots: users}));\r\n\t}\r\n\tonSearchChange = (event) =>\r\n\t{\r\n\t\tthis.setState({searchfield: event.target.value})\r\n     }\r\n\trender(){\r\n\t\tconst filteredRobots=this.state.robots.filter(robots =>{\r\n\t    return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase()); \r\n\t    })\r\n       if(this.state.robots.length === 0)\r\n       {\r\n       \treturn <h1>Loading</h1>\r\n       }\r\n       else{\r\n\t\treturn (\r\n\t\t<div className='tc'>\r\n\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t<Searchbox searchChange={this.onSearchChange}/>\r\n\t\t<Scroll>\r\n\t\t\r\n\t\t<CardList robots={filteredRobots} />\r\n\t\t\r\n\t\t</Scroll>\r\n\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n}\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import Card from './Card';\n//import CardList from './CardList';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App'\nimport { robots } from './robots';\n\n\nReactDOM.render(\n\t<App robots={robots} />\n  ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const robots = [\r\n  {\r\n    id: 1,\r\n    name: 'Leanne Graham',\r\n    username: 'Bret',\r\n    email: 'Sincere@april.biz'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Ervin Howell',\r\n    username: 'Antonette',\r\n    email: 'Shanna@melissa.tv'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Clementine Bauch',\r\n    username: 'Samantha',\r\n    email: 'Nathan@yesenia.net'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Patricia Lebsack',\r\n    username: 'Karianne',\r\n    email: 'Julianne.OConner@kory.org'\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Chelsey Dietrich',\r\n    username: 'Kamren',\r\n    email: 'Lucio_Hettinger@annie.ca'\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Mrs. Dennis Schulist',\r\n    username: 'Leopoldo_Corkery',\r\n    email: 'Karley_Dach@jasper.info'\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Kurtis Weissnat',\r\n    username: 'Elwyn.Skiles',\r\n    email: 'Telly.Hoeger@billy.biz'\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Nicholas Runolfsdottir V',\r\n    username: 'Maxime_Nienow',\r\n    email: 'Sherwood@rosamond.me'\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Glenna Reichert',\r\n    username: 'Delphine',\r\n    email: 'Chaim_McDermott@dana.io'\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Clementina DuBuque',\r\n    username: 'Moriah.Stanton',\r\n    email: 'Rey.Padberg@karina.biz'\r\n  }\r\n];\r\n"],"sourceRoot":""}